name: Deploy Medusa to AWS ECS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: medusa-commerce
  ECS_CLUSTER: medusa-commerce-cluster
  ECS_SERVER_SERVICE: medusa-commerce-server-service
  ECS_WORKER_SERVICE: medusa-commerce-worker-service
  ECS_SERVER_TASK_DEFINITION: medusa-commerce-server
  ECS_WORKER_TASK_DEFINITION: medusa-commerce-worker

jobs:
  terraform:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve

  build-and-deploy:
    name: 'Build and Deploy Application'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push the images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the image URI for use in subsequent steps
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS task definitions
      id: update-task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get current task definitions
        aws ecs describe-task-definition --task-definition $ECS_SERVER_TASK_DEFINITION --query taskDefinition > server-task-definition.json
        aws ecs describe-task-definition --task-definition $ECS_WORKER_TASK_DEFINITION --query taskDefinition > worker-task-definition.json
        
        # Update image URI in task definitions
        jq --arg IMAGE_URI "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE_URI' server-task-definition.json > updated-server-task-definition.json
        jq --arg IMAGE_URI "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE_URI' worker-task-definition.json > updated-worker-task-definition.json
        
        # Remove fields that are not needed for registration
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' updated-server-task-definition.json > final-server-task-definition.json
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' updated-worker-task-definition.json > final-worker-task-definition.json

    - name: Deploy to Amazon ECS
      run: |
        # Register new task definitions
        aws ecs register-task-definition --cli-input-json file://final-server-task-definition.json
        aws ecs register-task-definition --cli-input-json file://final-worker-task-definition.json
        
        # Update services with new task definitions
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVER_SERVICE --task-definition $ECS_SERVER_TASK_DEFINITION
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_WORKER_SERVICE --task-definition $ECS_WORKER_TASK_DEFINITION
        
        # Wait for services to reach stable state
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVER_SERVICE $ECS_WORKER_SERVICE

    - name: Verify deployment
      run: |
        # Get the load balancer DNS name
        LB_DNS=$(aws elbv2 describe-load-balancers --names medusa-commerce-alb --query 'LoadBalancers[0].DNSName' --output text)
        echo "Load Balancer DNS: $LB_DNS"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://$LB_DNS/health || echo "Health check failed"
        
        # Output deployment info
        echo "Deployment completed successfully!"
        echo "Application URL: http://$LB_DNS"
        echo "Admin URL: http://$LB_DNS/app"

  notify:
    name: 'Notify Deployment Status'
    runs-on: ubuntu-latest
    needs: [terraform, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Your Medusa application is now running on AWS ECS with Fargate."
        
    - name: Notify Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs above for troubleshooting information."
